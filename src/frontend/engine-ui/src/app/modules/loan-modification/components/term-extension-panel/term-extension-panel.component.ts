import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';
import { Amortization } from '../../../../../../../engine/models/Amortization';
import { TermExtension, TermExtensions, TermExtensionParams } from '../../../../../../../engine/models/TermExtension';
import { DateUtil } from '../../../../../../../engine/utils/DateUtil'; // Assuming DateUtil is needed for date conversions if any

@Component({
  selector: 'app-term-extension-panel',
  templateUrl: './term-extension-panel.component.html',
  styleUrls: ['./term-extension-panel.component.css'] // Corrected to .css as generated by CLI
})
export class TermExtensionPanelComponent implements OnInit {
  @Input() amortization!: Amortization;
  @Input() termExtensions!: TermExtensions;

  @Output() termExtensionsChange = new EventEmitter<TermExtensions>();
  @Output() markAsModified = new EventEmitter<void>();

  newExtensionDate: string = '';
  newTermsModified: number | null = null;

  constructor() { }

  ngOnInit(): void {
    if (!this.termExtensions && this.amortization) {
      this.termExtensions = this.amortization.termExtensions;
    }
  }

  addTermExtension(): void {
    if (!this.newExtensionDate || this.newTermsModified === null || this.newTermsModified === undefined) {
      // Basic validation: ensure date and terms are provided
      // Consider adding more sophisticated validation (e.g., date format, termsModified is integer)
      console.error('New term extension date and terms modified are required.');
      return;
    }

    if (this.newTermsModified === 0) {
        console.error('Terms modified cannot be zero.');
        return;
    }

    const params: TermExtensionParams = {
      date: this.newExtensionDate, // Assuming date string is in 'YYYY-MM-DD' format
      termsModified: this.newTermsModified,
      active: true // Default to active
    };

    this.termExtensions.addTermExtension(params);
    this.termExtensions.reSort(); // Ensure the list is sorted by date after adding

    this.termExtensionsChange.emit(this.termExtensions);
    this.markAsModified.emit();

    // Clear input fields
    this.newExtensionDate = '';
    this.newTermsModified = null;
  }

  removeTermExtension(extension: TermExtension): void {
    this.termExtensions.removeTermExtension(extension);
    // No need to reSort here as removal doesn't change order of others

    this.termExtensionsChange.emit(this.termExtensions);
    this.markAsModified.emit();
  }

  toggleActive(extension: TermExtension): void {
    extension.active = !extension.active;
    extension.updateJsValues(); // Ensure JS-bound properties are updated

    // Re-sorting might be useful if active status affects display order, but typically not.
    // this.termExtensions.reSort(); 

    this.termExtensionsChange.emit(this.termExtensions);
    this.markAsModified.emit();
  }

  // Helper to get JS Date for display in template, as TermExtension.jsDate is already a JS Date
  getJsDate(extension: TermExtension): Date {
    return extension.jsDate;
  }
}
